#include <iostream>

template <typename T> class Node {
 public:
    T val;
    Node *next;

    Node() {
        next = NULL;
    }

    Node(T val) {
        this->val = val;
        next = NULL;
    }
};

template<typename T> class List {
public:
    size_t size() const {
        return sizeVal;
    }

    List(size_t sizeVal, Node<T> *first, Node<T> *last) {
        this->sizeVal = sizeVal;
        this->first = first;
        this->last = last;
    }

    List() {
        sizeVal = 0;
        first = new Node<T>();
        last = first;
    }

    ~List() {
        if (first == NULL) {
            return;
        }

        Node<T> *nextHead = first, *head;
        while (nextHead != last) {
            head = nextHead;
            nextHead = nextHead->next;
            delete head;
        }
        delete(last);
    }

    void Add(T val) {
        last->val = val;
        last->next = new Node<T>();
        last = last->next;
        ++sizeVal;
    }

    void updFirst(Node<T>* newFirst) {
        first = newFirst;
    }

    Node<T>* begin() const {
        return first;
    }

    Node<T>* end() const {
        return last;
    }

 private:
    Node<T> *first, *last;
    size_t sizeVal;
};

template <typename T> std::ostream& operator << (std::ostream& out, const List<T> &outVal) {
        auto element = outVal.begin();
        while (element != outVal.end()) {
            out << element->val << ' ';
            element = element->next;
        }

        return out;
}

template <typename T> void Sort(List<T>& sortList) {
        if (sortList.size() < 2) {
            return;
        }

        if (sortList.size() == 2) {
            auto newFirst = sortList.begin()->next;
            if (sortList.begin()->val <= newFirst->val) {
                return;
            }

            sortList.begin()->next = sortList.end();
            newFirst->next = sortList.begin();
            sortList.updFirst(newFirst);
            return;
        }


        auto midNode = sortList.begin();
        for (size_t i = 0; i < sortList.size() / 2; ++i) {
            midNode = midNode->next;
        }
        auto firstList = List<T>(sortList.size() / 2, sortList.begin(), midNode);
        auto lastList = List<T>(sortList.size() - sortList.size() / 2, midNode, sortList.end());
        Sort(firstList);
        Sort(lastList);
        auto sortSize = sortList.size();
        auto headFirst = firstList.begin();
        auto headLast = lastList.begin();
        Node<T>* head;
        if (headFirst->val <= headLast->val) {
            head = headFirst;
            headFirst = headFirst->next;
        } else {
            head = headLast;
            headLast = headLast->next;
        }
        auto tail = head;
        while ((headFirst != firstList.end()) || (headLast != lastList.end())) {
            if (headLast == lastList.end() || (headFirst != firstList.end() && headFirst->val <= headLast->val)) {
                tail->next = headFirst;
                headFirst = headFirst->next;
            } else {
                tail->next = headLast;
                headLast = headLast->next;
            }
            tail = tail->next;
        }
        tail->next = sortList.end();
        firstList.updFirst(NULL);
        lastList.updFirst(NULL);
        sortList.updFirst(head);
}


int main() {
    int n, val;
    List<int> inputList;
    std::cin >> n;
    for (int i = 0; i < n; ++i) {
        std::cin >> val;
        inputList.Add(val);
    }

    Sort(inputList);

    std::cout << inputList << '\n';
}
